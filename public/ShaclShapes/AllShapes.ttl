@prefix sh:      <http://www.w3.org/ns/shacl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix ex:      <https://ex/> .
@prefix fso:     <http://w3id.org/fso#> .
@prefix fpo:     <http://w3id.org/fpo#> .
@prefix xsd:      <http://www.w3.org/2001/XMLSchema#> .
@prefix inst:    <https://example.com/inst#> .

#HeatExchanger validation
    ex:HeatExchanger
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:HeatExchanger ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 4;
        sh:message "HeatExchanger";
        sh:message "A heat exchanger must have at least four flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:message "HeatExchanger";
        sh:message "A heat exchanger must feed fluid to at least two components";
        sh:deactivated false
    ] ;
       sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:message "HeatExchanger";
        sh:message "A heat exchanger must be fed with fluid by two components";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 3;
        sh:message "HeatExchanger";
        sh:message "A heat exchanger must be connected to at least three systems";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:designHeatingPower ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "HeatExchanger";
        sh:message "Minimum/maximum one property of design heating power must be present for a heat exchanger";
        sh:deactivated false
    ] .

    #Transition validation
    ex:Transition
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Transition ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "Transition";
        sh:message "A transition must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Transition";
        sh:message "A transition must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:message "Transition";
        sh:message "A transition must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Transition";
        sh:message "A transition must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:materialType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Transition";
        sh:message "Minimum/maximum one property of material type must be present for a transition";
        sh:deactivated false
    ] .

    #Pipe validation
    ex:Pipe
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Pipe ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "Pipe";
        sh:message "A pipe must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pipe";
        sh:message "A pipe must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:message "Pipe";
        sh:message "A pipe must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pipe";
        sh:message "A pipe must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:materialType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pipe";
        sh:message "Minimum/maximum one property of material type must be present in a pipe";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:length ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pipe";
        sh:message "Minimum/maximum one property of length must be present for a pipe";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fpo:roughness ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pipe";
        sh:message "Minimum/maximum one property of roughness type must be present for a pipe";
        sh:deactivated false
    ] .

    
#The pressure drop of a pipe
    ex:PipePressureDrop
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Pipe ;
    sh:message "Pipe";
    sh:message "The pressure drop of a pipe shall not exceed 100 Pa/m";
    sh:sparql  [
        a sh:sh:SPARQLConstraint  ;
        sh:prefixes (fpo: fso: inst:) ;
        sh:select """PREFIX fso: <http://w3id.org/fso#> PREFIX fpo: <http://w3id.org/fpo#> PREFIX inst: <https://example.com/inst#>
        SELECT ?this ?value
        WHERE {
            ?this a fpo:Pipe . 
            ?this fpo:length ?length .
            ?length fpo:value ?lengthvalue .
            ?this fso:hasPort ?port .
            ?port fpo:flowDirection ?flowDirection .
            ?flowDirection fpo:value "Out" .
            ?port fpo:pressureDrop ?pressureDrop .
            ?pressureDrop fpo:value ?pressureDropValue .
            bind ((?pressureDropValue / ?lengthvalue) as ?value) .
            filter (?value > 100)} """ ; 
  ] .

    #Duct validation
    ex:Duct
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Duct ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "Duct";
        sh:message "A duct must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Duct";
        sh:message "A duct must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:message "Duct";
        sh:message "A duct must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Duct";
        sh:message "A duct must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:materialType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Duct";
        sh:message "Minimum/maximum one property of material type must be present in a duct";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:length ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Duct";
        sh:message "Minimum/maximum one property of length type must be present in a duct";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fpo:roughness ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Duct";
        sh:message "Minimum/maximum one property of roughness must be present for a duct";
        sh:deactivated false
    ] .

    #Transition validation
    ex:Elbow
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Elbow ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "Elbow";
        sh:message "An elbow must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Elbow";
        sh:message "An elbow must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Elbow";
        sh:message "An elbow must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Elbow";
        sh:message "An elbow must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:materialType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Elbow";
        sh:message "Minimum/maximum one property of material type must be present for an elbow";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fpo:angle ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Elbow";
        sh:message "Minimum/maximum one property of angle must be present for an elbow";
        sh:deactivated false
    ].


    #Pump validation
    ex:Pump
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Pump ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "Pump";
        sh:message "A pump must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pump";
        sh:message "A pump must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pump";
        sh:message "A pump must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pump";
        sh:message "A pump must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:pressureCurve ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pump";
        sh:message "Minimum/maximum one property of pressure curve type must be present for a pump";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fpo:powerCurve ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Pump";
        sh:message "Minimum/maximum one property of power curve must be present for a pump";
        sh:deactivated false
    ].

    #Fan validation
    ex:Fan
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Fan ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "Fan";
        sh:message "A fan must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Fan";
        sh:message "A fan must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Fan";
        sh:message "A fan must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Fan";
        sh:message "A fan must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:pressureCurve ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Fan";
        sh:message "Minimum/maximum one property of pressure curve type must be present for a fan";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fpo:powerCurve ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Fan";
        sh:message "Minimum/maximum one property of power curve must be present for a fan";
        sh:deactivated false
    ].

#Port validation
    ex:Port-1
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fso:Port ;
    sh:message "Port";
    sh:message "A port must have minimum/maximum one property of outerdiameter or width and heigth";
    sh:deactivated false;
    sh:or ( 
         [
            sh:and 
            (
            [sh:path     fpo:height ;
            sh:dataType xsd:anyURI ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            ]
            [sh:path     fpo:width ;
            sh:dataType xsd:anyURI ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
            ]          
            );
         ]
         [  
            sh:path     fpo:outerDiameter ;
            sh:dataType xsd:anyURI ;
            sh:minCount 1 ;
            sh:maxCount 1 ;
         ]
       ) .

#Port validation
    ex:Port-2
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fso:Port ;
    sh:property [
        sh:path fpo:flowDirection ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Port";
        sh:message "A port must have minimum/maximum one flow";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:flowDirection ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Port";
        sh:message "A port must have minimum/maximum one flow direction";
        sh:deactivated false
    ] .



#Port validation
    ex:Port-3
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
sh:target [
        a sh:SPARQLTarget ;
        sh:prefixes (fpo: fso: ex:) ;
        sh:select """PREFIX fso: <https://w3id.org/fso#> PREFIX fpo: <https://w3id.org/fpo#> prefix ex: <http://example.org/> 
        SELECT ?this WHERE {?this a fso:Port .?this fpo:flowDirection ?flowDirection .?flowDirection fpo:value "Out"} """ ;
  ];    
    sh:property [
        sh:path fpo:pressureDrop ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Port";
        sh:message "Minimum/maximum one property of pressure drop must be present for an outlet port";
        sh:deactivated false
    ] ;    
    sh:property [
        sh:path fpo:flowRate ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Port";
        sh:message "Minimum/maximum one property of flow rate must be present for an outlet port";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:velocity ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Port";
        sh:message "Minimum/maximum one property of flow velocity must be present for an outlet port";
        sh:deactivated false
    ].

#Flow validation
    ex:Flow
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fso:Flow ;
    sh:property[
        sh:path fpo:temperature ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Flow";
        sh:message "A flow must have a temperature";
        sh:deactivated false
    ] .


#PressureDrop validation
    ex:PressureDrop
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:PressureDrop ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Pascal"^^xsd:string ;
        sh:message "Property";
        sh:message "The property pressure drop must have minimum/maximum one unit and its unit must be in Pascal";
        sh:deactivated false 
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property pressure drop must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated true 

    ]; .


#Velocity validation
    ex:Velocity
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Velocity ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Meters per second"^^xsd:string ;
        sh:message "Property";
        sh:message "The property velocity must have minimum/maximum one unit and its unit must be in meters per second";
        sh:deactivated false 
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property velocity must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false 
    ]; .


#FlowRate validation
    ex:FlowRate
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:FlowRate ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Liters per second"^^xsd:string ;
        sh:message "Property";
        sh:message "The property flow rate must have minimum/maximum one unit and its unit must be in liters per second";
        sh:deactivated false 
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property flow rate must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false 
    ]; .

    #OuterDiameter validation
    ex:OuterDiameter
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:OuterDiameter ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Meter"^^xsd:string ;
        sh:message "Property";
        sh:message "The property flow rate must have minimum/maximum one unit and its unit must be in meter";
        sh:deactivated false 
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property outer diameter must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false 
    ]; .

    #Width validation
    ex:Width
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Width ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Meter"^^xsd:string ;
        sh:message "Property";
        sh:message "The property width must have minimum/maximum one unit and its unit must be in meter";
        sh:deactivated false 
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property width must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false 
    ]; .

     #Heigth validation
    ex:Heigth
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Heigth ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Meter"^^xsd:string ;
        sh:message "Property";
        sh:message "The property heigth must have minimum/maximum one unit and its unit must be in meter";
        sh:deactivated false 
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property heigth must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false 
    ]; .

    #Roughness validation
    ex:Roughness
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Roughness ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Meter"^^xsd:string ;
        sh:message "Property";
        sh:message "The property roughness must have minimum/maximum one unit and its unit must be in meter";
        sh:deactivated false 
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property roughness must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false 
    ]; .

      #Angle validation
    ex:Angle
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Angle ;
    sh:property[
        sh:path fpo:unit ;
        sh:dataType xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:hasValue "Degree"^^xsd:string ;
        sh:message "Property";
        sh:message "The property angle must have minimum/maximum one unit and its unit must be in degree";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property angle must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false
    ]; .

      #Kv validation
    ex:Kv
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:Kv, fpo:Kvs ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:minInclusive 0.001;
        sh:dataType xsd:double ;
        sh:message "Property";
        sh:message "The property kv or kvs must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false
    ]; .

    #Curves validation
    ex:Curves
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:PressureCurve, fpo:PowerCurve ;
    sh:property [
        sh:path fpo:curve ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:dataType xsd:string ;
        sh:message "Property";
        sh:message "The property power curve or pressure curve must have minimum/maximum one value and it must have a value";
        sh:deactivated false
    ]; .


#AirTerminalType validation
    ex:AirTerminalType
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:AirTerminalType ;
    sh:property [
        sh:path fpo:value ;
        sh:minCount 1;
        sh:maxCount 1;
        sh:or ([sh:hasValue "inlet"][sh:hasValue "outlet"]);
        sh:dataType xsd:string ;
        sh:message "Property";
        sh:message "The property airterminal type must have minimum/maximum one value and its value must be above 0.001";
        sh:deactivated false
    ]; .


#SupplySystem validation
    ex:SupplySystem
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fso:SupplySystem;
    sh:property[
        sh:path fso:hasComponent ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:message "System";
        sh:message "A supplySystem must have at least one component";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:hasFlow ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "System";
        sh:message "A supplySystem must have a flow";
        sh:deactivated false
    ] .

#ReturnSystem validation
    ex:ReturnSystem
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fso:ReturnSystem;
    sh:property[
        sh:path fso:hasComponent ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:message "System";
        sh:message "A ReturnSystem must have at least one component";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:hasFlow ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "System";
        sh:message "A ReturnSystem must have a flow";
        sh:deactivated false
    ] .


    #SpaceHeater validation
    ex:SpaceHeater
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:SpaceHeater ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "SpaceHeater";
        sh:message "A spaceheater must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "SpaceHeater";
        sh:message "A spaceheater must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "SpaceHeater";
        sh:message "A spaceheater must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "SpaceHeater";
        sh:message "A spaceheater must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:designHeatingPower ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "SpaceHeater";
        sh:message "Minimum/maximum one property of pressure curve must be present for a spaceheater";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fso:transfersHeatTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "SpaceHeater";
        sh:message "Minimum/maximum one property of transfers heat to must be present for a spaceheater";
        sh:deactivated false
    ].

    #BalacingValve validation
    ex:BalancingValve
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:BalancingValve ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "BalancingValve";
        sh:message "A balancing valve must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingValve";
        sh:message "A balancing valve must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingValve";
        sh:message "A balancing valve must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingValve";
        sh:message "A balancing valve must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:kv ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingValve";
        sh:message "Minimum/maximum one property of kv type must be present for a balancing valve";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fpo:kvs ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingValve";
        sh:message "Minimum/maximum one property of kvs must be present for a balancing valve";
        sh:deactivated false
    ].

    #BalacingDamper validation
    ex:BalacingDamper
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:BalancingDamper ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "BalancingDamper";
        sh:message "A balancing damper must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingDamper";
        sh:message "A balancing damper must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingDamper";
        sh:message "A balancing damper must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingDamper";
        sh:message "A balancing damper must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:kv ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingDamper";
        sh:message "Minimum/maximum one property of kv type must be present for a balancing damper";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fpo:kvs ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "BalancingDamper";
        sh:message "Minimum/maximum one property of kvs must be present for a balancing damper";
        sh:deactivated false
    ].

    #MotorizedValve validation
    ex:MotorizedValve
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:MotorizedValve ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "MotorizedValve";
        sh:message "A motorized valve must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedValve";
        sh:message "A motorized valve must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedValve";
        sh:message "A motorized valve must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedValve";
        sh:message "A motorized valve must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:kv ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedValve";
        sh:message "Minimum/maximum one property of kv type must be present for a motorized valve";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fpo:kvs ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedValve";
        sh:message "Minimum/maximum one property of kvs must be present for a motorized valve";
        sh:deactivated false
    ].

    #MotorizedDamper validation
    ex:MotorizedDamper
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:targetClass fpo:MotorizedDamper ;
    sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "MotorizedDamper";
        sh:message "A motorized damper must have minimum/maximum two flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedDamper";
        sh:message "A motorized damper must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedDamper";
        sh:message "A motorized damper must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedDamper";
        sh:message "A motorized damper must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:kv ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedDamper";
        sh:message "Minimum/maximum one property of kv type must be present for a motorized damper";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path fpo:kvs ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "MotorizedDamper";
        sh:message "Minimum/maximum one property of kvs must be present for a motorized damper";
        sh:deactivated false
    ].


#Tee supply-side validation
    ex:TeeSupplySide
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:target [
        a sh:SPARQLTarget ;
        sh:prefixes (fpo: fso: ex:) ;
        sh:select """PREFIX fso: <http://w3id.org/fso#> PREFIX fpo: <http://w3id.org/fpo#> prefix ex: <https://example.com/ex#> 
        SELECT ?this WHERE {?system a fso:SupplySystem .?system fso:hasComponent ?this .?this a fpo:Tee} """ ;
  ];
   sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 3;
        sh:maxCount 3;
        sh:message "Tee";
        sh:message "A tee must have minimum/maximum three flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "Tee";
        sh:message "A tee must feed fluid to minimum/maximum two components";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Tee";
        sh:message "A tee must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:materialType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Tee";
        sh:message "Minimum/maximum one property of material type must be present for a tee";
        sh:deactivated false
    ] ;
     .

#Tee return-side validation
    ex:TeeReturnSide
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:target [
        a sh:SPARQLTarget ;
        sh:prefixes (fpo: fso: ex:) ;
        sh:select """PREFIX fso: <http://w3id.org/fso#> PREFIX fpo: <http://w3id.org/fpo#> prefix ex: <https://example.com/ex#> 
        SELECT ?this WHERE {?system a fso:ReturnSystem .?system fso:hasComponent ?this .?this a fpo:Tee} """ ;
  ];
   sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 3;
        sh:maxCount 3;
        sh:message "Tee";
        sh:message "A tee must have minimum/maximum three flow ports";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Tee";
        sh:message "A tee must feed fluid to minimum/maximum two components";
        sh:deactivated false
    ] ;
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:message "Tee";
        sh:message "A tee must be fed with fluid by minimum/maximum two components";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Tee";
        sh:message "A tee must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:materialType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Tee";
        sh:message "Minimum/maximum one property of material type must be present for a tee";
        sh:deactivated false
    ] ;
     .

#AirTerminal supply-side validation
    ex:AirTerminal-1
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:target [
        a sh:SPARQLTarget ;
        sh:prefixes (fpo: fso: ex:) ;
        sh:select """PREFIX fso: <http://w3id.org/fso#> PREFIX fpo: <http://w3id.org/fpo#> prefix ex: <https://example.com/ex#> 
        SELECT ?this WHERE {?system a fso:SupplySystem .?system fso:hasComponent ?this .?this a fpo:AirTerminal} """ ;
  ];sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "AirTerminal";
        sh:message "An airterminal must have minimum/maximum one flow port";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path [sh:inversePath fso:feedsFluidTo] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "AirTerminal";
        sh:message "An airterminal must be fed with fluid by minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "AirTerminal";
        sh:message "An airterminal must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:airTerminalType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "AirTerminal";
        sh:message "Minimum/maximum one property of airterminal type must be present for an airterminal";
        sh:deactivated false
    ]
     .



#AirTerminal return-side validation
    ex:AirTerminal-2
    a sh:NodeShape;
    sh:nodeKind sh:IRI ;
    sh:target [
        a sh:SPARQLTarget ;
        sh:prefixes (fpo: fso: ex:) ;
        sh:select """PREFIX fso: <http://w3id.org/fso#> PREFIX fpo: <http://w3id.org/fpo#> prefix ex: <https://example.com/ex#> 
        SELECT ?this WHERE {?system a fso:ReturnSystem .?system fso:hasComponent ?this .?this a fpo:AirTerminal} """ ;
  ];sh:property[
        sh:path fso:hasPort ;
        sh:dataType xsd:anyURI;
        sh:minCount 2;
        sh:maxCount 2;
        sh:message "AirTerminal";
        sh:message "An airterminal must have minimum/maximum one flow port";
        sh:deactivated false
    ]; 
    sh:property [
        sh:path fso:feedsFluidTo ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "AirTerminal";
        sh:message "An airterminal must feed fluid to minimum/maximum one component";
        sh:deactivated false
    ] ;
     sh:property [
        sh:path [sh:inversePath fso:hasComponent] ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "AirTerminal";
        sh:message "An airterminal must be connected to minimum/maximum one system";
        sh:deactivated false
    ] ; 
    sh:property [
        sh:path fpo:airTerminalType ;
        sh:dataType xsd:anyURI;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "AirTerminal";
        sh:message "Minimum/maximum one property of airterminal type must be present for an airterminal";
        sh:deactivated false
    ]
     .